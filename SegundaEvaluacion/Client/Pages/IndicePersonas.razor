@page "/personas"
@inject IHttpService http
<h2 class="blockquote text-center">Personas</h2>
<table class="table">
    @if (personas == null)
    {
        <tr>Cargando.....</tr>
    }
    else if (personas.Count == 0)
    {
        <tr>No existen Personas</tr>
    }
    else
    {

        <thead>
            <tr>
                <th>DNI</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Nacimiento</th>


            </tr>
        </thead>
        <tbody>

            @foreach (var item in personas)
            {
                <tr>
                    <td>@item.dni</td>
                    <td>@item.nombre</td>
                    <td>@item.apellido</td>
                    <td>@item.fecha_nacimiento.ToShortDateString()</td>



                    <td>
                        <a class="btn btn-warning"
                           href="Personas/editar/@item.Id">
                            Editar
                        </a>
                        <button class="btn btn-danger" @onclick="() => Eliminar(item)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    }
</table>
<div>
    <a class="btn btn-outline-success" href="personas/crear">Nuevo</a>
</div>
    
    <Confirmacion @ref="confirmacion"
                  onConfirm="GrabarEliminar"
                  onCancel="Cancelar"
                  Titulo="BORRAR"
                  textCancelar="Salir"
                  textOk="Aceptar">
        <div>¿Desea eliminar a  @eliminarpersona.nombre @eliminarpersona.apellido ?</div>
    </Confirmacion>


    @code {
        //TODO: no se puede guardar por depender de nacionalidad
        List<SegundaEvaluacion.Shared.Datos.Entidades.Persona> personas;
        Confirmacion confirmacion;

        SegundaEvaluacion.Shared.Datos.Entidades.Persona eliminarpersona;

protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Leer();
    }
    private async Task Leer()
    {
        var respuestaHttp = await http.Get<List<SegundaEvaluacion.Shared.Datos.Entidades.Persona>>("api/personas");
        if (!respuestaHttp.Error)
        {
            personas = respuestaHttp.Respuesta;
        }
    }



    private void Eliminar(SegundaEvaluacion.Shared.Datos.Entidades.Persona personaEliminar)
    {
        confirmacion.Mostrar();
        eliminarpersona = personaEliminar;
    }

    private async Task GrabarEliminar()
    {
        var respuesta = await http.Delete($"api/personas/{eliminarpersona.Id}");
        if (respuesta.Error)
        {
            var body = await respuesta.GetBody();
        }
        Cancelar();
        await Leer();
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        eliminarpersona = null;
    }

    }
