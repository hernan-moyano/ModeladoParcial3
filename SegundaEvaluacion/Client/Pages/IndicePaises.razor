@page "/paises"
@inject IHttpService http
<h2 >Paises</h2>
<div>
    <a class="btn btn-outline-success" href="paises/crear">Nuevo</a>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Código</th>
            <th>Nombre</th>
        </tr>
    </thead>
    @if (paises == null)
    {
        <tr>Cargando.....</tr>
    }
    else if (paises.Count == 0)
    {
        <tr>No existen paises</tr>
    }
    else
    {
        <tbody>
            @foreach (var item in paises)
            {

                <tr>
                    <td>@item.CodPais</td>
                    <td>@item.NombrePais</td>
                    <td>
                        <a class="btn btn-outline-warning"
                           href="paises/editar/@item.Id">
                            Editar
                        </a>

                        <button class="btn btn-outline-danger" @onclick="()=>Eliminar(item)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    }

</table>

<Confirmacion @ref="confirmacion"
              onConfirm="GrabarEliminar"
              onCancel="Cancelar"
              Titulo="BORRAR"
              textCancelar="Salir"
              textOk="Aceptar">
    <div>¿Desea eliminar el país @eliminarPais.NombrePais?</div>
</Confirmacion>


@code {
    List<SegundaEvaluacion.Shared.Datos.Entidades.Pais> paises;
    Confirmacion confirmacion;

    SegundaEvaluacion.Shared.Datos.Entidades.Pais eliminarPais;

    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();

    //    paises = new()
    //    {
    //            new SegundaEvaluacion.Shared.Datos.Entidades.Pais()
    //                new SegundaEvaluacion.Shared.Datos.Entidades.Pais()
    //        };
    //}

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Leer();
    }
    private async Task Leer()
    {
        var respuestaHttp = await http.Get<List<SegundaEvaluacion.Shared.Datos.Entidades.Pais>>("api/paises");
        if (!respuestaHttp.Error)
        {
            paises = respuestaHttp.Respuesta;
        }
    }
    //private void Eliminar(SegundaEvaluacion.Shared.Datos.Entidades.Pais paisEliminar)
    //{
    //    confirmacion.Mostrar();
    //    eliminarPais = paisEliminar;
    //}
    //private void GrabarEliminar()
    //{
    //    paises.Remove(eliminarPais);
    //    Cancelar();
    //}
    private void Eliminar(SegundaEvaluacion.Shared.Datos.Entidades.Pais paisEliminar)
    {
        confirmacion.Mostrar();
        eliminarPais = paisEliminar;
    }

    private async Task GrabarEliminar()
    {
        var respuesta = await http.Delete($"api/paises/{eliminarPais.Id}");
        if (respuesta.Error)
        {
            var body = await respuesta.GetBody();
        }
        Cancelar();
        await Leer();
    }


    private void Cancelar()
    {
        confirmacion.Ocultar();
        eliminarPais = null;
    }

}